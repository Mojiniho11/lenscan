/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/DispatcherSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DispatcherSet.event_id"];
          profileId?: parameters["rowFilter.DispatcherSet.profileId"];
          dispatcher?: parameters["rowFilter.DispatcherSet.dispatcher"];
          timestamp?: parameters["rowFilter.DispatcherSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["DispatcherSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** DispatcherSet */
          DispatcherSet?: definitions["DispatcherSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DispatcherSet.event_id"];
          profileId?: parameters["rowFilter.DispatcherSet.profileId"];
          dispatcher?: parameters["rowFilter.DispatcherSet.dispatcher"];
          timestamp?: parameters["rowFilter.DispatcherSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DispatcherSet.event_id"];
          profileId?: parameters["rowFilter.DispatcherSet.profileId"];
          dispatcher?: parameters["rowFilter.DispatcherSet.dispatcher"];
          timestamp?: parameters["rowFilter.DispatcherSet.timestamp"];
        };
        body: {
          /** DispatcherSet */
          DispatcherSet?: definitions["DispatcherSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CollectNFTDeployed": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.CollectNFTDeployed.profileId"];
          pubId?: parameters["rowFilter.CollectNFTDeployed.pubId"];
          collectNFT?: parameters["rowFilter.CollectNFTDeployed.collectNFT"];
          timestamp?: parameters["rowFilter.CollectNFTDeployed.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CollectNFTDeployed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CollectNFTDeployed */
          CollectNFTDeployed?: definitions["CollectNFTDeployed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.CollectNFTDeployed.profileId"];
          pubId?: parameters["rowFilter.CollectNFTDeployed.pubId"];
          collectNFT?: parameters["rowFilter.CollectNFTDeployed.collectNFT"];
          timestamp?: parameters["rowFilter.CollectNFTDeployed.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.CollectNFTDeployed.profileId"];
          pubId?: parameters["rowFilter.CollectNFTDeployed.pubId"];
          collectNFT?: parameters["rowFilter.CollectNFTDeployed.collectNFT"];
          timestamp?: parameters["rowFilter.CollectNFTDeployed.timestamp"];
        };
        body: {
          /** CollectNFTDeployed */
          CollectNFTDeployed?: definitions["CollectNFTDeployed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowModuleWhitelisted": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleWhitelisted.event_id"];
          followModule?: parameters["rowFilter.FollowModuleWhitelisted.followModule"];
          whitelisted?: parameters["rowFilter.FollowModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.FollowModuleWhitelisted.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowModuleWhitelisted"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowModuleWhitelisted */
          FollowModuleWhitelisted?: definitions["FollowModuleWhitelisted"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleWhitelisted.event_id"];
          followModule?: parameters["rowFilter.FollowModuleWhitelisted.followModule"];
          whitelisted?: parameters["rowFilter.FollowModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.FollowModuleWhitelisted.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleWhitelisted.event_id"];
          followModule?: parameters["rowFilter.FollowModuleWhitelisted.followModule"];
          whitelisted?: parameters["rowFilter.FollowModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.FollowModuleWhitelisted.timestamp"];
        };
        body: {
          /** FollowModuleWhitelisted */
          FollowModuleWhitelisted?: definitions["FollowModuleWhitelisted"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowNFTInitialized": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.FollowNFTInitialized.profileId"];
          timestamp?: parameters["rowFilter.FollowNFTInitialized.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowNFTInitialized"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowNFTInitialized */
          FollowNFTInitialized?: definitions["FollowNFTInitialized"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.FollowNFTInitialized.profileId"];
          timestamp?: parameters["rowFilter.FollowNFTInitialized.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.FollowNFTInitialized.profileId"];
          timestamp?: parameters["rowFilter.FollowNFTInitialized.timestamp"];
        };
        body: {
          /** FollowNFTInitialized */
          FollowNFTInitialized?: definitions["FollowNFTInitialized"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowModuleSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleSet.event_id"];
          profileId?: parameters["rowFilter.FollowModuleSet.profileId"];
          followModule?: parameters["rowFilter.FollowModuleSet.followModule"];
          followModuleReturnData?: parameters["rowFilter.FollowModuleSet.followModuleReturnData"];
          timestamp?: parameters["rowFilter.FollowModuleSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowModuleSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowModuleSet */
          FollowModuleSet?: definitions["FollowModuleSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleSet.event_id"];
          profileId?: parameters["rowFilter.FollowModuleSet.profileId"];
          followModule?: parameters["rowFilter.FollowModuleSet.followModule"];
          followModuleReturnData?: parameters["rowFilter.FollowModuleSet.followModuleReturnData"];
          timestamp?: parameters["rowFilter.FollowModuleSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowModuleSet.event_id"];
          profileId?: parameters["rowFilter.FollowModuleSet.profileId"];
          followModule?: parameters["rowFilter.FollowModuleSet.followModule"];
          followModuleReturnData?: parameters["rowFilter.FollowModuleSet.followModuleReturnData"];
          timestamp?: parameters["rowFilter.FollowModuleSet.timestamp"];
        };
        body: {
          /** FollowModuleSet */
          FollowModuleSet?: definitions["FollowModuleSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Followed": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Followed.event_id"];
          follower?: parameters["rowFilter.Followed.follower"];
          profileIds?: parameters["rowFilter.Followed.profileIds"];
          followModuleDatas?: parameters["rowFilter.Followed.followModuleDatas"];
          timestamp?: parameters["rowFilter.Followed.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Followed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Followed */
          Followed?: definitions["Followed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Followed.event_id"];
          follower?: parameters["rowFilter.Followed.follower"];
          profileIds?: parameters["rowFilter.Followed.profileIds"];
          followModuleDatas?: parameters["rowFilter.Followed.followModuleDatas"];
          timestamp?: parameters["rowFilter.Followed.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Followed.event_id"];
          follower?: parameters["rowFilter.Followed.follower"];
          profileIds?: parameters["rowFilter.Followed.profileIds"];
          followModuleDatas?: parameters["rowFilter.Followed.followModuleDatas"];
          timestamp?: parameters["rowFilter.Followed.timestamp"];
        };
        body: {
          /** Followed */
          Followed?: definitions["Followed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ModuleGlobalsCurrencyWhitelisted": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.event_id"];
          currency?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.currency"];
          prevWhitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.prevWhitelisted"];
          whitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ModuleGlobalsCurrencyWhitelisted"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ModuleGlobalsCurrencyWhitelisted */
          ModuleGlobalsCurrencyWhitelisted?: definitions["ModuleGlobalsCurrencyWhitelisted"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.event_id"];
          currency?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.currency"];
          prevWhitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.prevWhitelisted"];
          whitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.event_id"];
          currency?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.currency"];
          prevWhitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.prevWhitelisted"];
          whitelisted?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ModuleGlobalsCurrencyWhitelisted.timestamp"];
        };
        body: {
          /** ModuleGlobalsCurrencyWhitelisted */
          ModuleGlobalsCurrencyWhitelisted?: definitions["ModuleGlobalsCurrencyWhitelisted"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/DefaultProfileSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DefaultProfileSet.event_id"];
          wallet?: parameters["rowFilter.DefaultProfileSet.wallet"];
          profileId?: parameters["rowFilter.DefaultProfileSet.profileId"];
          timestamp?: parameters["rowFilter.DefaultProfileSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["DefaultProfileSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** DefaultProfileSet */
          DefaultProfileSet?: definitions["DefaultProfileSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DefaultProfileSet.event_id"];
          wallet?: parameters["rowFilter.DefaultProfileSet.wallet"];
          profileId?: parameters["rowFilter.DefaultProfileSet.profileId"];
          timestamp?: parameters["rowFilter.DefaultProfileSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.DefaultProfileSet.event_id"];
          wallet?: parameters["rowFilter.DefaultProfileSet.wallet"];
          profileId?: parameters["rowFilter.DefaultProfileSet.profileId"];
          timestamp?: parameters["rowFilter.DefaultProfileSet.timestamp"];
        };
        body: {
          /** DefaultProfileSet */
          DefaultProfileSet?: definitions["DefaultProfileSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/PostCreated": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.PostCreated.event_id"];
          profileId?: parameters["rowFilter.PostCreated.profileId"];
          pubId?: parameters["rowFilter.PostCreated.pubId"];
          contentURI?: parameters["rowFilter.PostCreated.contentURI"];
          collectModule?: parameters["rowFilter.PostCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.PostCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.PostCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.PostCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.PostCreated.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["PostCreated"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** PostCreated */
          PostCreated?: definitions["PostCreated"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.PostCreated.event_id"];
          profileId?: parameters["rowFilter.PostCreated.profileId"];
          pubId?: parameters["rowFilter.PostCreated.pubId"];
          contentURI?: parameters["rowFilter.PostCreated.contentURI"];
          collectModule?: parameters["rowFilter.PostCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.PostCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.PostCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.PostCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.PostCreated.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.PostCreated.event_id"];
          profileId?: parameters["rowFilter.PostCreated.profileId"];
          pubId?: parameters["rowFilter.PostCreated.pubId"];
          contentURI?: parameters["rowFilter.PostCreated.contentURI"];
          collectModule?: parameters["rowFilter.PostCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.PostCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.PostCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.PostCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.PostCreated.timestamp"];
        };
        body: {
          /** PostCreated */
          PostCreated?: definitions["PostCreated"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/BaseInitialized": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.BaseInitialized.event_id"];
          name?: parameters["rowFilter.BaseInitialized.name"];
          symbol?: parameters["rowFilter.BaseInitialized.symbol"];
          timestamp?: parameters["rowFilter.BaseInitialized.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["BaseInitialized"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** BaseInitialized */
          BaseInitialized?: definitions["BaseInitialized"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.BaseInitialized.event_id"];
          name?: parameters["rowFilter.BaseInitialized.name"];
          symbol?: parameters["rowFilter.BaseInitialized.symbol"];
          timestamp?: parameters["rowFilter.BaseInitialized.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.BaseInitialized.event_id"];
          name?: parameters["rowFilter.BaseInitialized.name"];
          symbol?: parameters["rowFilter.BaseInitialized.symbol"];
          timestamp?: parameters["rowFilter.BaseInitialized.timestamp"];
        };
        body: {
          /** BaseInitialized */
          BaseInitialized?: definitions["BaseInitialized"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ModuleBaseConstructed": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleBaseConstructed.event_id"];
          hub?: parameters["rowFilter.ModuleBaseConstructed.hub"];
          timestamp?: parameters["rowFilter.ModuleBaseConstructed.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ModuleBaseConstructed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ModuleBaseConstructed */
          ModuleBaseConstructed?: definitions["ModuleBaseConstructed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleBaseConstructed.event_id"];
          hub?: parameters["rowFilter.ModuleBaseConstructed.hub"];
          timestamp?: parameters["rowFilter.ModuleBaseConstructed.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleBaseConstructed.event_id"];
          hub?: parameters["rowFilter.ModuleBaseConstructed.hub"];
          timestamp?: parameters["rowFilter.ModuleBaseConstructed.timestamp"];
        };
        body: {
          /** ModuleBaseConstructed */
          ModuleBaseConstructed?: definitions["ModuleBaseConstructed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Collected": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Collected.event_id"];
          collector?: parameters["rowFilter.Collected.collector"];
          profileId?: parameters["rowFilter.Collected.profileId"];
          pubId?: parameters["rowFilter.Collected.pubId"];
          rootProfileId?: parameters["rowFilter.Collected.rootProfileId"];
          rootPubId?: parameters["rowFilter.Collected.rootPubId"];
          collectModuleData?: parameters["rowFilter.Collected.collectModuleData"];
          timestamp?: parameters["rowFilter.Collected.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Collected"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Collected */
          Collected?: definitions["Collected"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Collected.event_id"];
          collector?: parameters["rowFilter.Collected.collector"];
          profileId?: parameters["rowFilter.Collected.profileId"];
          pubId?: parameters["rowFilter.Collected.pubId"];
          rootProfileId?: parameters["rowFilter.Collected.rootProfileId"];
          rootPubId?: parameters["rowFilter.Collected.rootPubId"];
          collectModuleData?: parameters["rowFilter.Collected.collectModuleData"];
          timestamp?: parameters["rowFilter.Collected.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Collected.event_id"];
          collector?: parameters["rowFilter.Collected.collector"];
          profileId?: parameters["rowFilter.Collected.profileId"];
          pubId?: parameters["rowFilter.Collected.pubId"];
          rootProfileId?: parameters["rowFilter.Collected.rootProfileId"];
          rootPubId?: parameters["rowFilter.Collected.rootPubId"];
          collectModuleData?: parameters["rowFilter.Collected.collectModuleData"];
          timestamp?: parameters["rowFilter.Collected.timestamp"];
        };
        body: {
          /** Collected */
          Collected?: definitions["Collected"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowsApproved": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsApproved.event_id"];
          owner?: parameters["rowFilter.FollowsApproved.owner"];
          profileId?: parameters["rowFilter.FollowsApproved.profileId"];
          addresses?: parameters["rowFilter.FollowsApproved.addresses"];
          approved?: parameters["rowFilter.FollowsApproved.approved"];
          timestamp?: parameters["rowFilter.FollowsApproved.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowsApproved"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowsApproved */
          FollowsApproved?: definitions["FollowsApproved"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsApproved.event_id"];
          owner?: parameters["rowFilter.FollowsApproved.owner"];
          profileId?: parameters["rowFilter.FollowsApproved.profileId"];
          addresses?: parameters["rowFilter.FollowsApproved.addresses"];
          approved?: parameters["rowFilter.FollowsApproved.approved"];
          timestamp?: parameters["rowFilter.FollowsApproved.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsApproved.event_id"];
          owner?: parameters["rowFilter.FollowsApproved.owner"];
          profileId?: parameters["rowFilter.FollowsApproved.profileId"];
          addresses?: parameters["rowFilter.FollowsApproved.addresses"];
          approved?: parameters["rowFilter.FollowsApproved.approved"];
          timestamp?: parameters["rowFilter.FollowsApproved.timestamp"];
        };
        body: {
          /** FollowsApproved */
          FollowsApproved?: definitions["FollowsApproved"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ApprovalForAll": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ApprovalForAll.event_id"];
          owner?: parameters["rowFilter.ApprovalForAll.owner"];
          operator?: parameters["rowFilter.ApprovalForAll.operator"];
          approved?: parameters["rowFilter.ApprovalForAll.approved"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ApprovalForAll"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ApprovalForAll */
          ApprovalForAll?: definitions["ApprovalForAll"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ApprovalForAll.event_id"];
          owner?: parameters["rowFilter.ApprovalForAll.owner"];
          operator?: parameters["rowFilter.ApprovalForAll.operator"];
          approved?: parameters["rowFilter.ApprovalForAll.approved"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ApprovalForAll.event_id"];
          owner?: parameters["rowFilter.ApprovalForAll.owner"];
          operator?: parameters["rowFilter.ApprovalForAll.operator"];
          approved?: parameters["rowFilter.ApprovalForAll.approved"];
        };
        body: {
          /** ApprovalForAll */
          ApprovalForAll?: definitions["ApprovalForAll"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/GovernanceSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.GovernanceSet.event_id"];
          caller?: parameters["rowFilter.GovernanceSet.caller"];
          prevGovernance?: parameters["rowFilter.GovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.GovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.GovernanceSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["GovernanceSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** GovernanceSet */
          GovernanceSet?: definitions["GovernanceSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.GovernanceSet.event_id"];
          caller?: parameters["rowFilter.GovernanceSet.caller"];
          prevGovernance?: parameters["rowFilter.GovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.GovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.GovernanceSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.GovernanceSet.event_id"];
          caller?: parameters["rowFilter.GovernanceSet.caller"];
          prevGovernance?: parameters["rowFilter.GovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.GovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.GovernanceSet.timestamp"];
        };
        body: {
          /** GovernanceSet */
          GovernanceSet?: definitions["GovernanceSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Approval": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Approval.event_id"];
          owner?: parameters["rowFilter.Approval.owner"];
          approved?: parameters["rowFilter.Approval.approved"];
          tokenId?: parameters["rowFilter.Approval.tokenId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Approval"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Approval */
          Approval?: definitions["Approval"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Approval.event_id"];
          owner?: parameters["rowFilter.Approval.owner"];
          approved?: parameters["rowFilter.Approval.approved"];
          tokenId?: parameters["rowFilter.Approval.tokenId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Approval.event_id"];
          owner?: parameters["rowFilter.Approval.owner"];
          approved?: parameters["rowFilter.Approval.approved"];
          tokenId?: parameters["rowFilter.Approval.tokenId"];
        };
        body: {
          /** Approval */
          Approval?: definitions["Approval"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/MirrorCreated": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.MirrorCreated.event_id"];
          profileId?: parameters["rowFilter.MirrorCreated.profileId"];
          pubId?: parameters["rowFilter.MirrorCreated.pubId"];
          profileIdPointed?: parameters["rowFilter.MirrorCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.MirrorCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.MirrorCreated.referenceModuleData"];
          referenceModule?: parameters["rowFilter.MirrorCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.MirrorCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.MirrorCreated.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["MirrorCreated"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** MirrorCreated */
          MirrorCreated?: definitions["MirrorCreated"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.MirrorCreated.event_id"];
          profileId?: parameters["rowFilter.MirrorCreated.profileId"];
          pubId?: parameters["rowFilter.MirrorCreated.pubId"];
          profileIdPointed?: parameters["rowFilter.MirrorCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.MirrorCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.MirrorCreated.referenceModuleData"];
          referenceModule?: parameters["rowFilter.MirrorCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.MirrorCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.MirrorCreated.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.MirrorCreated.event_id"];
          profileId?: parameters["rowFilter.MirrorCreated.profileId"];
          pubId?: parameters["rowFilter.MirrorCreated.pubId"];
          profileIdPointed?: parameters["rowFilter.MirrorCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.MirrorCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.MirrorCreated.referenceModuleData"];
          referenceModule?: parameters["rowFilter.MirrorCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.MirrorCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.MirrorCreated.timestamp"];
        };
        body: {
          /** MirrorCreated */
          MirrorCreated?: definitions["MirrorCreated"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ProfileCreated": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreated.event_id"];
          profileId?: parameters["rowFilter.ProfileCreated.profileId"];
          creator?: parameters["rowFilter.ProfileCreated.creator"];
          to?: parameters["rowFilter.ProfileCreated.to"];
          handle?: parameters["rowFilter.ProfileCreated.handle"];
          imageURI?: parameters["rowFilter.ProfileCreated.imageURI"];
          followModule?: parameters["rowFilter.ProfileCreated.followModule"];
          followModuleReturnData?: parameters["rowFilter.ProfileCreated.followModuleReturnData"];
          followNFTURI?: parameters["rowFilter.ProfileCreated.followNFTURI"];
          timestamp?: parameters["rowFilter.ProfileCreated.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ProfileCreated"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ProfileCreated */
          ProfileCreated?: definitions["ProfileCreated"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreated.event_id"];
          profileId?: parameters["rowFilter.ProfileCreated.profileId"];
          creator?: parameters["rowFilter.ProfileCreated.creator"];
          to?: parameters["rowFilter.ProfileCreated.to"];
          handle?: parameters["rowFilter.ProfileCreated.handle"];
          imageURI?: parameters["rowFilter.ProfileCreated.imageURI"];
          followModule?: parameters["rowFilter.ProfileCreated.followModule"];
          followModuleReturnData?: parameters["rowFilter.ProfileCreated.followModuleReturnData"];
          followNFTURI?: parameters["rowFilter.ProfileCreated.followNFTURI"];
          timestamp?: parameters["rowFilter.ProfileCreated.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreated.event_id"];
          profileId?: parameters["rowFilter.ProfileCreated.profileId"];
          creator?: parameters["rowFilter.ProfileCreated.creator"];
          to?: parameters["rowFilter.ProfileCreated.to"];
          handle?: parameters["rowFilter.ProfileCreated.handle"];
          imageURI?: parameters["rowFilter.ProfileCreated.imageURI"];
          followModule?: parameters["rowFilter.ProfileCreated.followModule"];
          followModuleReturnData?: parameters["rowFilter.ProfileCreated.followModuleReturnData"];
          followNFTURI?: parameters["rowFilter.ProfileCreated.followNFTURI"];
          timestamp?: parameters["rowFilter.ProfileCreated.timestamp"];
        };
        body: {
          /** ProfileCreated */
          ProfileCreated?: definitions["ProfileCreated"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CollectNFTTransferred": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.CollectNFTTransferred.profileId"];
          pubId?: parameters["rowFilter.CollectNFTTransferred.pubId"];
          collectNFTId?: parameters["rowFilter.CollectNFTTransferred.collectNFTId"];
          from?: parameters["rowFilter.CollectNFTTransferred.from"];
          to?: parameters["rowFilter.CollectNFTTransferred.to"];
          timestamp?: parameters["rowFilter.CollectNFTTransferred.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CollectNFTTransferred"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CollectNFTTransferred */
          CollectNFTTransferred?: definitions["CollectNFTTransferred"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.CollectNFTTransferred.profileId"];
          pubId?: parameters["rowFilter.CollectNFTTransferred.pubId"];
          collectNFTId?: parameters["rowFilter.CollectNFTTransferred.collectNFTId"];
          from?: parameters["rowFilter.CollectNFTTransferred.from"];
          to?: parameters["rowFilter.CollectNFTTransferred.to"];
          timestamp?: parameters["rowFilter.CollectNFTTransferred.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.CollectNFTTransferred.profileId"];
          pubId?: parameters["rowFilter.CollectNFTTransferred.pubId"];
          collectNFTId?: parameters["rowFilter.CollectNFTTransferred.collectNFTId"];
          from?: parameters["rowFilter.CollectNFTTransferred.from"];
          to?: parameters["rowFilter.CollectNFTTransferred.to"];
          timestamp?: parameters["rowFilter.CollectNFTTransferred.timestamp"];
        };
        body: {
          /** CollectNFTTransferred */
          CollectNFTTransferred?: definitions["CollectNFTTransferred"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/LastBlock": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LastBlock.id"];
          blockNumber?: parameters["rowFilter.LastBlock.blockNumber"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["LastBlock"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** LastBlock */
          LastBlock?: definitions["LastBlock"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LastBlock.id"];
          blockNumber?: parameters["rowFilter.LastBlock.blockNumber"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LastBlock.id"];
          blockNumber?: parameters["rowFilter.LastBlock.blockNumber"];
        };
        body: {
          /** LastBlock */
          LastBlock?: definitions["LastBlock"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ProfileCreatorWhitelisted": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreatorWhitelisted.event_id"];
          profileCreator?: parameters["rowFilter.ProfileCreatorWhitelisted.profileCreator"];
          whitelisted?: parameters["rowFilter.ProfileCreatorWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ProfileCreatorWhitelisted.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ProfileCreatorWhitelisted"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ProfileCreatorWhitelisted */
          ProfileCreatorWhitelisted?: definitions["ProfileCreatorWhitelisted"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreatorWhitelisted.event_id"];
          profileCreator?: parameters["rowFilter.ProfileCreatorWhitelisted.profileCreator"];
          whitelisted?: parameters["rowFilter.ProfileCreatorWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ProfileCreatorWhitelisted.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileCreatorWhitelisted.event_id"];
          profileCreator?: parameters["rowFilter.ProfileCreatorWhitelisted.profileCreator"];
          whitelisted?: parameters["rowFilter.ProfileCreatorWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ProfileCreatorWhitelisted.timestamp"];
        };
        body: {
          /** ProfileCreatorWhitelisted */
          ProfileCreatorWhitelisted?: definitions["ProfileCreatorWhitelisted"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/EmergencyAdminSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.EmergencyAdminSet.event_id"];
          caller?: parameters["rowFilter.EmergencyAdminSet.caller"];
          oldEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.oldEmergencyAdmin"];
          newEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.newEmergencyAdmin"];
          timestamp?: parameters["rowFilter.EmergencyAdminSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["EmergencyAdminSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** EmergencyAdminSet */
          EmergencyAdminSet?: definitions["EmergencyAdminSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.EmergencyAdminSet.event_id"];
          caller?: parameters["rowFilter.EmergencyAdminSet.caller"];
          oldEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.oldEmergencyAdmin"];
          newEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.newEmergencyAdmin"];
          timestamp?: parameters["rowFilter.EmergencyAdminSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.EmergencyAdminSet.event_id"];
          caller?: parameters["rowFilter.EmergencyAdminSet.caller"];
          oldEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.oldEmergencyAdmin"];
          newEmergencyAdmin?: parameters["rowFilter.EmergencyAdminSet.newEmergencyAdmin"];
          timestamp?: parameters["rowFilter.EmergencyAdminSet.timestamp"];
        };
        body: {
          /** EmergencyAdminSet */
          EmergencyAdminSet?: definitions["EmergencyAdminSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ReferenceModuleWhitelisted": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ReferenceModuleWhitelisted.event_id"];
          referenceModule?: parameters["rowFilter.ReferenceModuleWhitelisted.referenceModule"];
          whitelisted?: parameters["rowFilter.ReferenceModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ReferenceModuleWhitelisted.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ReferenceModuleWhitelisted"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ReferenceModuleWhitelisted */
          ReferenceModuleWhitelisted?: definitions["ReferenceModuleWhitelisted"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ReferenceModuleWhitelisted.event_id"];
          referenceModule?: parameters["rowFilter.ReferenceModuleWhitelisted.referenceModule"];
          whitelisted?: parameters["rowFilter.ReferenceModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ReferenceModuleWhitelisted.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ReferenceModuleWhitelisted.event_id"];
          referenceModule?: parameters["rowFilter.ReferenceModuleWhitelisted.referenceModule"];
          whitelisted?: parameters["rowFilter.ReferenceModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.ReferenceModuleWhitelisted.timestamp"];
        };
        body: {
          /** ReferenceModuleWhitelisted */
          ReferenceModuleWhitelisted?: definitions["ReferenceModuleWhitelisted"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowsToggled": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsToggled.event_id"];
          owner?: parameters["rowFilter.FollowsToggled.owner"];
          profileIds?: parameters["rowFilter.FollowsToggled.profileIds"];
          enabled?: parameters["rowFilter.FollowsToggled.enabled"];
          timestamp?: parameters["rowFilter.FollowsToggled.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowsToggled"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowsToggled */
          FollowsToggled?: definitions["FollowsToggled"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsToggled.event_id"];
          owner?: parameters["rowFilter.FollowsToggled.owner"];
          profileIds?: parameters["rowFilter.FollowsToggled.profileIds"];
          enabled?: parameters["rowFilter.FollowsToggled.enabled"];
          timestamp?: parameters["rowFilter.FollowsToggled.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowsToggled.event_id"];
          owner?: parameters["rowFilter.FollowsToggled.owner"];
          profileIds?: parameters["rowFilter.FollowsToggled.profileIds"];
          enabled?: parameters["rowFilter.FollowsToggled.enabled"];
          timestamp?: parameters["rowFilter.FollowsToggled.timestamp"];
        };
        body: {
          /** FollowsToggled */
          FollowsToggled?: definitions["FollowsToggled"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CollectNFTInitialized": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.CollectNFTInitialized.profileId"];
          pubId?: parameters["rowFilter.CollectNFTInitialized.pubId"];
          timestamp?: parameters["rowFilter.CollectNFTInitialized.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CollectNFTInitialized"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CollectNFTInitialized */
          CollectNFTInitialized?: definitions["CollectNFTInitialized"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.CollectNFTInitialized.profileId"];
          pubId?: parameters["rowFilter.CollectNFTInitialized.pubId"];
          timestamp?: parameters["rowFilter.CollectNFTInitialized.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectNFTInitialized.event_id"];
          profileId?: parameters["rowFilter.CollectNFTInitialized.profileId"];
          pubId?: parameters["rowFilter.CollectNFTInitialized.pubId"];
          timestamp?: parameters["rowFilter.CollectNFTInitialized.timestamp"];
        };
        body: {
          /** CollectNFTInitialized */
          CollectNFTInitialized?: definitions["CollectNFTInitialized"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FeeModuleBaseConstructed": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FeeModuleBaseConstructed.event_id"];
          moduleGlobals?: parameters["rowFilter.FeeModuleBaseConstructed.moduleGlobals"];
          timestamp?: parameters["rowFilter.FeeModuleBaseConstructed.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FeeModuleBaseConstructed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FeeModuleBaseConstructed */
          FeeModuleBaseConstructed?: definitions["FeeModuleBaseConstructed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FeeModuleBaseConstructed.event_id"];
          moduleGlobals?: parameters["rowFilter.FeeModuleBaseConstructed.moduleGlobals"];
          timestamp?: parameters["rowFilter.FeeModuleBaseConstructed.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FeeModuleBaseConstructed.event_id"];
          moduleGlobals?: parameters["rowFilter.FeeModuleBaseConstructed.moduleGlobals"];
          timestamp?: parameters["rowFilter.FeeModuleBaseConstructed.timestamp"];
        };
        body: {
          /** FeeModuleBaseConstructed */
          FeeModuleBaseConstructed?: definitions["FeeModuleBaseConstructed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ModuleGlobalsGovernanceSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsGovernanceSet.event_id"];
          prevGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.ModuleGlobalsGovernanceSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ModuleGlobalsGovernanceSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ModuleGlobalsGovernanceSet */
          ModuleGlobalsGovernanceSet?: definitions["ModuleGlobalsGovernanceSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsGovernanceSet.event_id"];
          prevGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.ModuleGlobalsGovernanceSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsGovernanceSet.event_id"];
          prevGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.prevGovernance"];
          newGovernance?: parameters["rowFilter.ModuleGlobalsGovernanceSet.newGovernance"];
          timestamp?: parameters["rowFilter.ModuleGlobalsGovernanceSet.timestamp"];
        };
        body: {
          /** ModuleGlobalsGovernanceSet */
          ModuleGlobalsGovernanceSet?: definitions["ModuleGlobalsGovernanceSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowNFTURISet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTURISet.event_id"];
          profileId?: parameters["rowFilter.FollowNFTURISet.profileId"];
          followNFTURI?: parameters["rowFilter.FollowNFTURISet.followNFTURI"];
          timestamp?: parameters["rowFilter.FollowNFTURISet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowNFTURISet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowNFTURISet */
          FollowNFTURISet?: definitions["FollowNFTURISet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTURISet.event_id"];
          profileId?: parameters["rowFilter.FollowNFTURISet.profileId"];
          followNFTURI?: parameters["rowFilter.FollowNFTURISet.followNFTURI"];
          timestamp?: parameters["rowFilter.FollowNFTURISet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTURISet.event_id"];
          profileId?: parameters["rowFilter.FollowNFTURISet.profileId"];
          followNFTURI?: parameters["rowFilter.FollowNFTURISet.followNFTURI"];
          timestamp?: parameters["rowFilter.FollowNFTURISet.timestamp"];
        };
        body: {
          /** FollowNFTURISet */
          FollowNFTURISet?: definitions["FollowNFTURISet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowNFTDeployed": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.FollowNFTDeployed.profileId"];
          followNFT?: parameters["rowFilter.FollowNFTDeployed.followNFT"];
          timestamp?: parameters["rowFilter.FollowNFTDeployed.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowNFTDeployed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowNFTDeployed */
          FollowNFTDeployed?: definitions["FollowNFTDeployed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.FollowNFTDeployed.profileId"];
          followNFT?: parameters["rowFilter.FollowNFTDeployed.followNFT"];
          timestamp?: parameters["rowFilter.FollowNFTDeployed.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDeployed.event_id"];
          profileId?: parameters["rowFilter.FollowNFTDeployed.profileId"];
          followNFT?: parameters["rowFilter.FollowNFTDeployed.followNFT"];
          timestamp?: parameters["rowFilter.FollowNFTDeployed.timestamp"];
        };
        body: {
          /** FollowNFTDeployed */
          FollowNFTDeployed?: definitions["FollowNFTDeployed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ModuleGlobalsTreasurySet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasurySet.event_id"];
          prevTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.prevTreasury"];
          newTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.newTreasury"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasurySet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ModuleGlobalsTreasurySet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ModuleGlobalsTreasurySet */
          ModuleGlobalsTreasurySet?: definitions["ModuleGlobalsTreasurySet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasurySet.event_id"];
          prevTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.prevTreasury"];
          newTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.newTreasury"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasurySet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasurySet.event_id"];
          prevTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.prevTreasury"];
          newTreasury?: parameters["rowFilter.ModuleGlobalsTreasurySet.newTreasury"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasurySet.timestamp"];
        };
        body: {
          /** ModuleGlobalsTreasurySet */
          ModuleGlobalsTreasurySet?: definitions["ModuleGlobalsTreasurySet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Event": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Event.id"];
          blockNumber?: parameters["rowFilter.Event.blockNumber"];
          txHash?: parameters["rowFilter.Event.txHash"];
          txIndex?: parameters["rowFilter.Event.txIndex"];
          logIndex?: parameters["rowFilter.Event.logIndex"];
          removed?: parameters["rowFilter.Event.removed"];
          event?: parameters["rowFilter.Event.event"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Event"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Event */
          Event?: definitions["Event"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Event.id"];
          blockNumber?: parameters["rowFilter.Event.blockNumber"];
          txHash?: parameters["rowFilter.Event.txHash"];
          txIndex?: parameters["rowFilter.Event.txIndex"];
          logIndex?: parameters["rowFilter.Event.logIndex"];
          removed?: parameters["rowFilter.Event.removed"];
          event?: parameters["rowFilter.Event.event"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Event.id"];
          blockNumber?: parameters["rowFilter.Event.blockNumber"];
          txHash?: parameters["rowFilter.Event.txHash"];
          txIndex?: parameters["rowFilter.Event.txIndex"];
          logIndex?: parameters["rowFilter.Event.logIndex"];
          removed?: parameters["rowFilter.Event.removed"];
          event?: parameters["rowFilter.Event.event"];
        };
        body: {
          /** Event */
          Event?: definitions["Event"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ProfileMetadataSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileMetadataSet.event_id"];
          profileId?: parameters["rowFilter.ProfileMetadataSet.profileId"];
          metadata?: parameters["rowFilter.ProfileMetadataSet.metadata"];
          timestamp?: parameters["rowFilter.ProfileMetadataSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ProfileMetadataSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ProfileMetadataSet */
          ProfileMetadataSet?: definitions["ProfileMetadataSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileMetadataSet.event_id"];
          profileId?: parameters["rowFilter.ProfileMetadataSet.profileId"];
          metadata?: parameters["rowFilter.ProfileMetadataSet.metadata"];
          timestamp?: parameters["rowFilter.ProfileMetadataSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileMetadataSet.event_id"];
          profileId?: parameters["rowFilter.ProfileMetadataSet.profileId"];
          metadata?: parameters["rowFilter.ProfileMetadataSet.metadata"];
          timestamp?: parameters["rowFilter.ProfileMetadataSet.timestamp"];
        };
        body: {
          /** ProfileMetadataSet */
          ProfileMetadataSet?: definitions["ProfileMetadataSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CommentCreated": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CommentCreated.event_id"];
          profileId?: parameters["rowFilter.CommentCreated.profileId"];
          pubId?: parameters["rowFilter.CommentCreated.pubId"];
          contentURI?: parameters["rowFilter.CommentCreated.contentURI"];
          profileIdPointed?: parameters["rowFilter.CommentCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.CommentCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.CommentCreated.referenceModuleData"];
          collectModule?: parameters["rowFilter.CommentCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.CommentCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.CommentCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.CommentCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.CommentCreated.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CommentCreated"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CommentCreated */
          CommentCreated?: definitions["CommentCreated"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CommentCreated.event_id"];
          profileId?: parameters["rowFilter.CommentCreated.profileId"];
          pubId?: parameters["rowFilter.CommentCreated.pubId"];
          contentURI?: parameters["rowFilter.CommentCreated.contentURI"];
          profileIdPointed?: parameters["rowFilter.CommentCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.CommentCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.CommentCreated.referenceModuleData"];
          collectModule?: parameters["rowFilter.CommentCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.CommentCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.CommentCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.CommentCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.CommentCreated.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CommentCreated.event_id"];
          profileId?: parameters["rowFilter.CommentCreated.profileId"];
          pubId?: parameters["rowFilter.CommentCreated.pubId"];
          contentURI?: parameters["rowFilter.CommentCreated.contentURI"];
          profileIdPointed?: parameters["rowFilter.CommentCreated.profileIdPointed"];
          pubIdPointed?: parameters["rowFilter.CommentCreated.pubIdPointed"];
          referenceModuleData?: parameters["rowFilter.CommentCreated.referenceModuleData"];
          collectModule?: parameters["rowFilter.CommentCreated.collectModule"];
          collectModuleReturnData?: parameters["rowFilter.CommentCreated.collectModuleReturnData"];
          referenceModule?: parameters["rowFilter.CommentCreated.referenceModule"];
          referenceModuleReturnData?: parameters["rowFilter.CommentCreated.referenceModuleReturnData"];
          timestamp?: parameters["rowFilter.CommentCreated.timestamp"];
        };
        body: {
          /** CommentCreated */
          CommentCreated?: definitions["CommentCreated"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ModuleGlobalsTreasuryFeeSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.event_id"];
          prevTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.prevTreasuryFee"];
          newTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.newTreasuryFee"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ModuleGlobalsTreasuryFeeSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ModuleGlobalsTreasuryFeeSet */
          ModuleGlobalsTreasuryFeeSet?: definitions["ModuleGlobalsTreasuryFeeSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.event_id"];
          prevTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.prevTreasuryFee"];
          newTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.newTreasuryFee"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.event_id"];
          prevTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.prevTreasuryFee"];
          newTreasuryFee?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.newTreasuryFee"];
          timestamp?: parameters["rowFilter.ModuleGlobalsTreasuryFeeSet.timestamp"];
        };
        body: {
          /** ModuleGlobalsTreasuryFeeSet */
          ModuleGlobalsTreasuryFeeSet?: definitions["ModuleGlobalsTreasuryFeeSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ProfileImageURISet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileImageURISet.event_id"];
          profileId?: parameters["rowFilter.ProfileImageURISet.profileId"];
          imageURI?: parameters["rowFilter.ProfileImageURISet.imageURI"];
          timestamp?: parameters["rowFilter.ProfileImageURISet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ProfileImageURISet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ProfileImageURISet */
          ProfileImageURISet?: definitions["ProfileImageURISet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileImageURISet.event_id"];
          profileId?: parameters["rowFilter.ProfileImageURISet.profileId"];
          imageURI?: parameters["rowFilter.ProfileImageURISet.imageURI"];
          timestamp?: parameters["rowFilter.ProfileImageURISet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.ProfileImageURISet.event_id"];
          profileId?: parameters["rowFilter.ProfileImageURISet.profileId"];
          imageURI?: parameters["rowFilter.ProfileImageURISet.imageURI"];
          timestamp?: parameters["rowFilter.ProfileImageURISet.timestamp"];
        };
        body: {
          /** ProfileImageURISet */
          ProfileImageURISet?: definitions["ProfileImageURISet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/StateSet": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.StateSet.event_id"];
          caller?: parameters["rowFilter.StateSet.caller"];
          prevState?: parameters["rowFilter.StateSet.prevState"];
          newState?: parameters["rowFilter.StateSet.newState"];
          timestamp?: parameters["rowFilter.StateSet.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["StateSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** StateSet */
          StateSet?: definitions["StateSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.StateSet.event_id"];
          caller?: parameters["rowFilter.StateSet.caller"];
          prevState?: parameters["rowFilter.StateSet.prevState"];
          newState?: parameters["rowFilter.StateSet.newState"];
          timestamp?: parameters["rowFilter.StateSet.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.StateSet.event_id"];
          caller?: parameters["rowFilter.StateSet.caller"];
          prevState?: parameters["rowFilter.StateSet.prevState"];
          newState?: parameters["rowFilter.StateSet.newState"];
          timestamp?: parameters["rowFilter.StateSet.timestamp"];
        };
        body: {
          /** StateSet */
          StateSet?: definitions["StateSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CollectModuleWhitelisted": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectModuleWhitelisted.event_id"];
          collectModule?: parameters["rowFilter.CollectModuleWhitelisted.collectModule"];
          whitelisted?: parameters["rowFilter.CollectModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.CollectModuleWhitelisted.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CollectModuleWhitelisted"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CollectModuleWhitelisted */
          CollectModuleWhitelisted?: definitions["CollectModuleWhitelisted"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectModuleWhitelisted.event_id"];
          collectModule?: parameters["rowFilter.CollectModuleWhitelisted.collectModule"];
          whitelisted?: parameters["rowFilter.CollectModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.CollectModuleWhitelisted.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.CollectModuleWhitelisted.event_id"];
          collectModule?: parameters["rowFilter.CollectModuleWhitelisted.collectModule"];
          whitelisted?: parameters["rowFilter.CollectModuleWhitelisted.whitelisted"];
          timestamp?: parameters["rowFilter.CollectModuleWhitelisted.timestamp"];
        };
        body: {
          /** CollectModuleWhitelisted */
          CollectModuleWhitelisted?: definitions["CollectModuleWhitelisted"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowNFTTransferred": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.FollowNFTTransferred.profileId"];
          followNFTId?: parameters["rowFilter.FollowNFTTransferred.followNFTId"];
          from?: parameters["rowFilter.FollowNFTTransferred.from"];
          to?: parameters["rowFilter.FollowNFTTransferred.to"];
          timestamp?: parameters["rowFilter.FollowNFTTransferred.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowNFTTransferred"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowNFTTransferred */
          FollowNFTTransferred?: definitions["FollowNFTTransferred"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.FollowNFTTransferred.profileId"];
          followNFTId?: parameters["rowFilter.FollowNFTTransferred.followNFTId"];
          from?: parameters["rowFilter.FollowNFTTransferred.from"];
          to?: parameters["rowFilter.FollowNFTTransferred.to"];
          timestamp?: parameters["rowFilter.FollowNFTTransferred.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTTransferred.event_id"];
          profileId?: parameters["rowFilter.FollowNFTTransferred.profileId"];
          followNFTId?: parameters["rowFilter.FollowNFTTransferred.followNFTId"];
          from?: parameters["rowFilter.FollowNFTTransferred.from"];
          to?: parameters["rowFilter.FollowNFTTransferred.to"];
          timestamp?: parameters["rowFilter.FollowNFTTransferred.timestamp"];
        };
        body: {
          /** FollowNFTTransferred */
          FollowNFTTransferred?: definitions["FollowNFTTransferred"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/FollowNFTDelegatedPowerChanged": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.event_id"];
          delegate?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.delegate"];
          newPower?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.newPower"];
          timestamp?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["FollowNFTDelegatedPowerChanged"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** FollowNFTDelegatedPowerChanged */
          FollowNFTDelegatedPowerChanged?: definitions["FollowNFTDelegatedPowerChanged"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.event_id"];
          delegate?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.delegate"];
          newPower?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.newPower"];
          timestamp?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.event_id"];
          delegate?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.delegate"];
          newPower?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.newPower"];
          timestamp?: parameters["rowFilter.FollowNFTDelegatedPowerChanged.timestamp"];
        };
        body: {
          /** FollowNFTDelegatedPowerChanged */
          FollowNFTDelegatedPowerChanged?: definitions["FollowNFTDelegatedPowerChanged"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Transfer": {
    get: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Transfer.event_id"];
          from?: parameters["rowFilter.Transfer.from"];
          to?: parameters["rowFilter.Transfer.to"];
          tokenId?: parameters["rowFilter.Transfer.tokenId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Transfer"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Transfer */
          Transfer?: definitions["Transfer"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Transfer.event_id"];
          from?: parameters["rowFilter.Transfer.from"];
          to?: parameters["rowFilter.Transfer.to"];
          tokenId?: parameters["rowFilter.Transfer.tokenId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          event_id?: parameters["rowFilter.Transfer.event_id"];
          from?: parameters["rowFilter.Transfer.from"];
          to?: parameters["rowFilter.Transfer.to"];
          tokenId?: parameters["rowFilter.Transfer.tokenId"];
        };
        body: {
          /** Transfer */
          Transfer?: definitions["Transfer"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/get_publications_summary": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: timestamp without time zone */
            end_date: string;
            /** Format: bigint */
            profile_id: number;
            /** Format: timestamp without time zone */
            start_date: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  DispatcherSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: character varying */
    dispatcher?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  CollectNFTDeployed: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: character varying */
    collectNFT?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowModuleWhitelisted: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    followModule?: string;
    /** Format: boolean */
    whitelisted?: boolean;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowNFTInitialized: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowModuleSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: character varying */
    followModule?: string;
    /** Format: bytea */
    followModuleReturnData?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  Followed: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    follower?: string;
    /** Format: bigint[] */
    profileIds?: number[];
    /** Format: bytea[] */
    followModuleDatas?: string[];
    /** Format: bigint */
    timestamp?: number;
  };
  ModuleGlobalsCurrencyWhitelisted: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    currency?: string;
    /** Format: boolean */
    prevWhitelisted?: boolean;
    /** Format: boolean */
    whitelisted?: boolean;
    /** Format: bigint */
    timestamp?: number;
  };
  DefaultProfileSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    wallet?: string;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  PostCreated: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: text */
    contentURI?: string;
    /** Format: character varying */
    collectModule?: string;
    /** Format: bytea */
    collectModuleReturnData?: string;
    /** Format: character varying */
    referenceModule?: string;
    /** Format: bytea */
    referenceModuleReturnData?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  BaseInitialized: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: text */
    name?: string;
    /** Format: text */
    symbol?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ModuleBaseConstructed: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    hub?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  Collected: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    collector?: string;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: bigint */
    rootProfileId?: number;
    /** Format: bigint */
    rootPubId?: number;
    /** Format: bytea */
    collectModuleData?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowsApproved: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    owner?: string;
    /** Format: bigint */
    profileId?: number;
    /** Format: character varying[] */
    addresses?: string[];
    /** Format: boolean[] */
    approved?: boolean[];
    /** Format: bigint */
    timestamp?: number;
  };
  ApprovalForAll: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    owner?: string;
    /** Format: character varying */
    operator?: string;
    /** Format: boolean */
    approved?: boolean;
  };
  GovernanceSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    caller?: string;
    /** Format: character varying */
    prevGovernance?: string;
    /** Format: character varying */
    newGovernance?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  Approval: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    owner?: string;
    /** Format: character varying */
    approved?: string;
    /** Format: bigint */
    tokenId?: number;
  };
  MirrorCreated: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: bigint */
    profileIdPointed?: number;
    /** Format: bigint */
    pubIdPointed?: number;
    /** Format: bytea */
    referenceModuleData?: string;
    /** Format: character varying */
    referenceModule?: string;
    /** Format: bytea */
    referenceModuleReturnData?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ProfileCreated: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: character varying */
    creator?: string;
    /** Format: character varying */
    to?: string;
    /** Format: text */
    handle?: string;
    /** Format: text */
    imageURI?: string;
    /** Format: character varying */
    followModule?: string;
    /** Format: bytea */
    followModuleReturnData?: string;
    /** Format: text */
    followNFTURI?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  CollectNFTTransferred: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: bigint */
    collectNFTId?: number;
    /** Format: character varying */
    from?: string;
    /** Format: character varying */
    to?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  LastBlock: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: integer */
    blockNumber?: number;
  };
  ProfileCreatorWhitelisted: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    profileCreator?: string;
    /** Format: boolean */
    whitelisted?: boolean;
    /** Format: bigint */
    timestamp?: number;
  };
  EmergencyAdminSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    caller?: string;
    /** Format: character varying */
    oldEmergencyAdmin?: string;
    /** Format: character varying */
    newEmergencyAdmin?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ReferenceModuleWhitelisted: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    referenceModule?: string;
    /** Format: boolean */
    whitelisted?: boolean;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowsToggled: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    owner?: string;
    /** Format: bigint[] */
    profileIds?: number[];
    /** Format: boolean[] */
    enabled?: boolean[];
    /** Format: bigint */
    timestamp?: number;
  };
  CollectNFTInitialized: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  FeeModuleBaseConstructed: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    moduleGlobals?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ModuleGlobalsGovernanceSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    prevGovernance?: string;
    /** Format: character varying */
    newGovernance?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowNFTURISet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: text */
    followNFTURI?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowNFTDeployed: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: character varying */
    followNFT?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ModuleGlobalsTreasurySet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    prevTreasury?: string;
    /** Format: character varying */
    newTreasury?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  Event: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: bigint */
    blockNumber?: number;
    /** Format: character varying */
    txHash?: string;
    /** Format: integer */
    txIndex?: number;
    /** Format: integer */
    logIndex?: number;
    /** Format: boolean */
    removed?: boolean;
    /** Format: text */
    event?: string;
  };
  ProfileMetadataSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: text */
    metadata?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  CommentCreated: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    pubId?: number;
    /** Format: text */
    contentURI?: string;
    /** Format: bigint */
    profileIdPointed?: number;
    /** Format: bigint */
    pubIdPointed?: number;
    /** Format: bytea */
    referenceModuleData?: string;
    /** Format: character varying */
    collectModule?: string;
    /** Format: bytea */
    collectModuleReturnData?: string;
    /** Format: character varying */
    referenceModule?: string;
    /** Format: bytea */
    referenceModuleReturnData?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  ModuleGlobalsTreasuryFeeSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: integer */
    prevTreasuryFee?: number;
    /** Format: integer */
    newTreasuryFee?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  ProfileImageURISet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: text */
    imageURI?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  StateSet: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    caller?: string;
    /** Format: smallint */
    prevState?: number;
    /** Format: smallint */
    newState?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  CollectModuleWhitelisted: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    collectModule?: string;
    /** Format: boolean */
    whitelisted?: boolean;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowNFTTransferred: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: bigint */
    profileId?: number;
    /** Format: bigint */
    followNFTId?: number;
    /** Format: character varying */
    from?: string;
    /** Format: character varying */
    to?: string;
    /** Format: bigint */
    timestamp?: number;
  };
  FollowNFTDelegatedPowerChanged: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    delegate?: string;
    /** Format: bigint */
    newPower?: number;
    /** Format: bigint */
    timestamp?: number;
  };
  Transfer: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    event_id: number;
    /** Format: character varying */
    from?: string;
    /** Format: character varying */
    to?: string;
    /** Format: bigint */
    tokenId?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description DispatcherSet */
  "body.DispatcherSet": definitions["DispatcherSet"];
  /** Format: integer */
  "rowFilter.DispatcherSet.event_id": string;
  /** Format: bigint */
  "rowFilter.DispatcherSet.profileId": string;
  /** Format: character varying */
  "rowFilter.DispatcherSet.dispatcher": string;
  /** Format: bigint */
  "rowFilter.DispatcherSet.timestamp": string;
  /** @description CollectNFTDeployed */
  "body.CollectNFTDeployed": definitions["CollectNFTDeployed"];
  /** Format: integer */
  "rowFilter.CollectNFTDeployed.event_id": string;
  /** Format: bigint */
  "rowFilter.CollectNFTDeployed.profileId": string;
  /** Format: bigint */
  "rowFilter.CollectNFTDeployed.pubId": string;
  /** Format: character varying */
  "rowFilter.CollectNFTDeployed.collectNFT": string;
  /** Format: bigint */
  "rowFilter.CollectNFTDeployed.timestamp": string;
  /** @description FollowModuleWhitelisted */
  "body.FollowModuleWhitelisted": definitions["FollowModuleWhitelisted"];
  /** Format: integer */
  "rowFilter.FollowModuleWhitelisted.event_id": string;
  /** Format: character varying */
  "rowFilter.FollowModuleWhitelisted.followModule": string;
  /** Format: boolean */
  "rowFilter.FollowModuleWhitelisted.whitelisted": string;
  /** Format: bigint */
  "rowFilter.FollowModuleWhitelisted.timestamp": string;
  /** @description FollowNFTInitialized */
  "body.FollowNFTInitialized": definitions["FollowNFTInitialized"];
  /** Format: integer */
  "rowFilter.FollowNFTInitialized.event_id": string;
  /** Format: bigint */
  "rowFilter.FollowNFTInitialized.profileId": string;
  /** Format: bigint */
  "rowFilter.FollowNFTInitialized.timestamp": string;
  /** @description FollowModuleSet */
  "body.FollowModuleSet": definitions["FollowModuleSet"];
  /** Format: integer */
  "rowFilter.FollowModuleSet.event_id": string;
  /** Format: bigint */
  "rowFilter.FollowModuleSet.profileId": string;
  /** Format: character varying */
  "rowFilter.FollowModuleSet.followModule": string;
  /** Format: bytea */
  "rowFilter.FollowModuleSet.followModuleReturnData": string;
  /** Format: bigint */
  "rowFilter.FollowModuleSet.timestamp": string;
  /** @description Followed */
  "body.Followed": definitions["Followed"];
  /** Format: integer */
  "rowFilter.Followed.event_id": string;
  /** Format: character varying */
  "rowFilter.Followed.follower": string;
  /** Format: bigint[] */
  "rowFilter.Followed.profileIds": string;
  /** Format: bytea[] */
  "rowFilter.Followed.followModuleDatas": string;
  /** Format: bigint */
  "rowFilter.Followed.timestamp": string;
  /** @description ModuleGlobalsCurrencyWhitelisted */
  "body.ModuleGlobalsCurrencyWhitelisted": definitions["ModuleGlobalsCurrencyWhitelisted"];
  /** Format: integer */
  "rowFilter.ModuleGlobalsCurrencyWhitelisted.event_id": string;
  /** Format: character varying */
  "rowFilter.ModuleGlobalsCurrencyWhitelisted.currency": string;
  /** Format: boolean */
  "rowFilter.ModuleGlobalsCurrencyWhitelisted.prevWhitelisted": string;
  /** Format: boolean */
  "rowFilter.ModuleGlobalsCurrencyWhitelisted.whitelisted": string;
  /** Format: bigint */
  "rowFilter.ModuleGlobalsCurrencyWhitelisted.timestamp": string;
  /** @description DefaultProfileSet */
  "body.DefaultProfileSet": definitions["DefaultProfileSet"];
  /** Format: integer */
  "rowFilter.DefaultProfileSet.event_id": string;
  /** Format: character varying */
  "rowFilter.DefaultProfileSet.wallet": string;
  /** Format: bigint */
  "rowFilter.DefaultProfileSet.profileId": string;
  /** Format: bigint */
  "rowFilter.DefaultProfileSet.timestamp": string;
  /** @description PostCreated */
  "body.PostCreated": definitions["PostCreated"];
  /** Format: integer */
  "rowFilter.PostCreated.event_id": string;
  /** Format: bigint */
  "rowFilter.PostCreated.profileId": string;
  /** Format: bigint */
  "rowFilter.PostCreated.pubId": string;
  /** Format: text */
  "rowFilter.PostCreated.contentURI": string;
  /** Format: character varying */
  "rowFilter.PostCreated.collectModule": string;
  /** Format: bytea */
  "rowFilter.PostCreated.collectModuleReturnData": string;
  /** Format: character varying */
  "rowFilter.PostCreated.referenceModule": string;
  /** Format: bytea */
  "rowFilter.PostCreated.referenceModuleReturnData": string;
  /** Format: bigint */
  "rowFilter.PostCreated.timestamp": string;
  /** @description BaseInitialized */
  "body.BaseInitialized": definitions["BaseInitialized"];
  /** Format: integer */
  "rowFilter.BaseInitialized.event_id": string;
  /** Format: text */
  "rowFilter.BaseInitialized.name": string;
  /** Format: text */
  "rowFilter.BaseInitialized.symbol": string;
  /** Format: bigint */
  "rowFilter.BaseInitialized.timestamp": string;
  /** @description ModuleBaseConstructed */
  "body.ModuleBaseConstructed": definitions["ModuleBaseConstructed"];
  /** Format: integer */
  "rowFilter.ModuleBaseConstructed.event_id": string;
  /** Format: character varying */
  "rowFilter.ModuleBaseConstructed.hub": string;
  /** Format: bigint */
  "rowFilter.ModuleBaseConstructed.timestamp": string;
  /** @description Collected */
  "body.Collected": definitions["Collected"];
  /** Format: integer */
  "rowFilter.Collected.event_id": string;
  /** Format: character varying */
  "rowFilter.Collected.collector": string;
  /** Format: bigint */
  "rowFilter.Collected.profileId": string;
  /** Format: bigint */
  "rowFilter.Collected.pubId": string;
  /** Format: bigint */
  "rowFilter.Collected.rootProfileId": string;
  /** Format: bigint */
  "rowFilter.Collected.rootPubId": string;
  /** Format: bytea */
  "rowFilter.Collected.collectModuleData": string;
  /** Format: bigint */
  "rowFilter.Collected.timestamp": string;
  /** @description FollowsApproved */
  "body.FollowsApproved": definitions["FollowsApproved"];
  /** Format: integer */
  "rowFilter.FollowsApproved.event_id": string;
  /** Format: character varying */
  "rowFilter.FollowsApproved.owner": string;
  /** Format: bigint */
  "rowFilter.FollowsApproved.profileId": string;
  /** Format: character varying[] */
  "rowFilter.FollowsApproved.addresses": string;
  /** Format: boolean[] */
  "rowFilter.FollowsApproved.approved": string;
  /** Format: bigint */
  "rowFilter.FollowsApproved.timestamp": string;
  /** @description ApprovalForAll */
  "body.ApprovalForAll": definitions["ApprovalForAll"];
  /** Format: integer */
  "rowFilter.ApprovalForAll.event_id": string;
  /** Format: character varying */
  "rowFilter.ApprovalForAll.owner": string;
  /** Format: character varying */
  "rowFilter.ApprovalForAll.operator": string;
  /** Format: boolean */
  "rowFilter.ApprovalForAll.approved": string;
  /** @description GovernanceSet */
  "body.GovernanceSet": definitions["GovernanceSet"];
  /** Format: integer */
  "rowFilter.GovernanceSet.event_id": string;
  /** Format: character varying */
  "rowFilter.GovernanceSet.caller": string;
  /** Format: character varying */
  "rowFilter.GovernanceSet.prevGovernance": string;
  /** Format: character varying */
  "rowFilter.GovernanceSet.newGovernance": string;
  /** Format: bigint */
  "rowFilter.GovernanceSet.timestamp": string;
  /** @description Approval */
  "body.Approval": definitions["Approval"];
  /** Format: integer */
  "rowFilter.Approval.event_id": string;
  /** Format: character varying */
  "rowFilter.Approval.owner": string;
  /** Format: character varying */
  "rowFilter.Approval.approved": string;
  /** Format: bigint */
  "rowFilter.Approval.tokenId": string;
  /** @description MirrorCreated */
  "body.MirrorCreated": definitions["MirrorCreated"];
  /** Format: integer */
  "rowFilter.MirrorCreated.event_id": string;
  /** Format: bigint */
  "rowFilter.MirrorCreated.profileId": string;
  /** Format: bigint */
  "rowFilter.MirrorCreated.pubId": string;
  /** Format: bigint */
  "rowFilter.MirrorCreated.profileIdPointed": string;
  /** Format: bigint */
  "rowFilter.MirrorCreated.pubIdPointed": string;
  /** Format: bytea */
  "rowFilter.MirrorCreated.referenceModuleData": string;
  /** Format: character varying */
  "rowFilter.MirrorCreated.referenceModule": string;
  /** Format: bytea */
  "rowFilter.MirrorCreated.referenceModuleReturnData": string;
  /** Format: bigint */
  "rowFilter.MirrorCreated.timestamp": string;
  /** @description ProfileCreated */
  "body.ProfileCreated": definitions["ProfileCreated"];
  /** Format: integer */
  "rowFilter.ProfileCreated.event_id": string;
  /** Format: bigint */
  "rowFilter.ProfileCreated.profileId": string;
  /** Format: character varying */
  "rowFilter.ProfileCreated.creator": string;
  /** Format: character varying */
  "rowFilter.ProfileCreated.to": string;
  /** Format: text */
  "rowFilter.ProfileCreated.handle": string;
  /** Format: text */
  "rowFilter.ProfileCreated.imageURI": string;
  /** Format: character varying */
  "rowFilter.ProfileCreated.followModule": string;
  /** Format: bytea */
  "rowFilter.ProfileCreated.followModuleReturnData": string;
  /** Format: text */
  "rowFilter.ProfileCreated.followNFTURI": string;
  /** Format: bigint */
  "rowFilter.ProfileCreated.timestamp": string;
  /** @description CollectNFTTransferred */
  "body.CollectNFTTransferred": definitions["CollectNFTTransferred"];
  /** Format: integer */
  "rowFilter.CollectNFTTransferred.event_id": string;
  /** Format: bigint */
  "rowFilter.CollectNFTTransferred.profileId": string;
  /** Format: bigint */
  "rowFilter.CollectNFTTransferred.pubId": string;
  /** Format: bigint */
  "rowFilter.CollectNFTTransferred.collectNFTId": string;
  /** Format: character varying */
  "rowFilter.CollectNFTTransferred.from": string;
  /** Format: character varying */
  "rowFilter.CollectNFTTransferred.to": string;
  /** Format: bigint */
  "rowFilter.CollectNFTTransferred.timestamp": string;
  /** @description LastBlock */
  "body.LastBlock": definitions["LastBlock"];
  /** Format: integer */
  "rowFilter.LastBlock.id": string;
  /** Format: integer */
  "rowFilter.LastBlock.blockNumber": string;
  /** @description ProfileCreatorWhitelisted */
  "body.ProfileCreatorWhitelisted": definitions["ProfileCreatorWhitelisted"];
  /** Format: integer */
  "rowFilter.ProfileCreatorWhitelisted.event_id": string;
  /** Format: character varying */
  "rowFilter.ProfileCreatorWhitelisted.profileCreator": string;
  /** Format: boolean */
  "rowFilter.ProfileCreatorWhitelisted.whitelisted": string;
  /** Format: bigint */
  "rowFilter.ProfileCreatorWhitelisted.timestamp": string;
  /** @description EmergencyAdminSet */
  "body.EmergencyAdminSet": definitions["EmergencyAdminSet"];
  /** Format: integer */
  "rowFilter.EmergencyAdminSet.event_id": string;
  /** Format: character varying */
  "rowFilter.EmergencyAdminSet.caller": string;
  /** Format: character varying */
  "rowFilter.EmergencyAdminSet.oldEmergencyAdmin": string;
  /** Format: character varying */
  "rowFilter.EmergencyAdminSet.newEmergencyAdmin": string;
  /** Format: bigint */
  "rowFilter.EmergencyAdminSet.timestamp": string;
  /** @description ReferenceModuleWhitelisted */
  "body.ReferenceModuleWhitelisted": definitions["ReferenceModuleWhitelisted"];
  /** Format: integer */
  "rowFilter.ReferenceModuleWhitelisted.event_id": string;
  /** Format: character varying */
  "rowFilter.ReferenceModuleWhitelisted.referenceModule": string;
  /** Format: boolean */
  "rowFilter.ReferenceModuleWhitelisted.whitelisted": string;
  /** Format: bigint */
  "rowFilter.ReferenceModuleWhitelisted.timestamp": string;
  /** @description FollowsToggled */
  "body.FollowsToggled": definitions["FollowsToggled"];
  /** Format: integer */
  "rowFilter.FollowsToggled.event_id": string;
  /** Format: character varying */
  "rowFilter.FollowsToggled.owner": string;
  /** Format: bigint[] */
  "rowFilter.FollowsToggled.profileIds": string;
  /** Format: boolean[] */
  "rowFilter.FollowsToggled.enabled": string;
  /** Format: bigint */
  "rowFilter.FollowsToggled.timestamp": string;
  /** @description CollectNFTInitialized */
  "body.CollectNFTInitialized": definitions["CollectNFTInitialized"];
  /** Format: integer */
  "rowFilter.CollectNFTInitialized.event_id": string;
  /** Format: bigint */
  "rowFilter.CollectNFTInitialized.profileId": string;
  /** Format: bigint */
  "rowFilter.CollectNFTInitialized.pubId": string;
  /** Format: bigint */
  "rowFilter.CollectNFTInitialized.timestamp": string;
  /** @description FeeModuleBaseConstructed */
  "body.FeeModuleBaseConstructed": definitions["FeeModuleBaseConstructed"];
  /** Format: integer */
  "rowFilter.FeeModuleBaseConstructed.event_id": string;
  /** Format: character varying */
  "rowFilter.FeeModuleBaseConstructed.moduleGlobals": string;
  /** Format: bigint */
  "rowFilter.FeeModuleBaseConstructed.timestamp": string;
  /** @description ModuleGlobalsGovernanceSet */
  "body.ModuleGlobalsGovernanceSet": definitions["ModuleGlobalsGovernanceSet"];
  /** Format: integer */
  "rowFilter.ModuleGlobalsGovernanceSet.event_id": string;
  /** Format: character varying */
  "rowFilter.ModuleGlobalsGovernanceSet.prevGovernance": string;
  /** Format: character varying */
  "rowFilter.ModuleGlobalsGovernanceSet.newGovernance": string;
  /** Format: bigint */
  "rowFilter.ModuleGlobalsGovernanceSet.timestamp": string;
  /** @description FollowNFTURISet */
  "body.FollowNFTURISet": definitions["FollowNFTURISet"];
  /** Format: integer */
  "rowFilter.FollowNFTURISet.event_id": string;
  /** Format: bigint */
  "rowFilter.FollowNFTURISet.profileId": string;
  /** Format: text */
  "rowFilter.FollowNFTURISet.followNFTURI": string;
  /** Format: bigint */
  "rowFilter.FollowNFTURISet.timestamp": string;
  /** @description FollowNFTDeployed */
  "body.FollowNFTDeployed": definitions["FollowNFTDeployed"];
  /** Format: integer */
  "rowFilter.FollowNFTDeployed.event_id": string;
  /** Format: bigint */
  "rowFilter.FollowNFTDeployed.profileId": string;
  /** Format: character varying */
  "rowFilter.FollowNFTDeployed.followNFT": string;
  /** Format: bigint */
  "rowFilter.FollowNFTDeployed.timestamp": string;
  /** @description ModuleGlobalsTreasurySet */
  "body.ModuleGlobalsTreasurySet": definitions["ModuleGlobalsTreasurySet"];
  /** Format: integer */
  "rowFilter.ModuleGlobalsTreasurySet.event_id": string;
  /** Format: character varying */
  "rowFilter.ModuleGlobalsTreasurySet.prevTreasury": string;
  /** Format: character varying */
  "rowFilter.ModuleGlobalsTreasurySet.newTreasury": string;
  /** Format: bigint */
  "rowFilter.ModuleGlobalsTreasurySet.timestamp": string;
  /** @description Event */
  "body.Event": definitions["Event"];
  /** Format: integer */
  "rowFilter.Event.id": string;
  /** Format: bigint */
  "rowFilter.Event.blockNumber": string;
  /** Format: character varying */
  "rowFilter.Event.txHash": string;
  /** Format: integer */
  "rowFilter.Event.txIndex": string;
  /** Format: integer */
  "rowFilter.Event.logIndex": string;
  /** Format: boolean */
  "rowFilter.Event.removed": string;
  /** Format: text */
  "rowFilter.Event.event": string;
  /** @description ProfileMetadataSet */
  "body.ProfileMetadataSet": definitions["ProfileMetadataSet"];
  /** Format: integer */
  "rowFilter.ProfileMetadataSet.event_id": string;
  /** Format: bigint */
  "rowFilter.ProfileMetadataSet.profileId": string;
  /** Format: text */
  "rowFilter.ProfileMetadataSet.metadata": string;
  /** Format: bigint */
  "rowFilter.ProfileMetadataSet.timestamp": string;
  /** @description CommentCreated */
  "body.CommentCreated": definitions["CommentCreated"];
  /** Format: integer */
  "rowFilter.CommentCreated.event_id": string;
  /** Format: bigint */
  "rowFilter.CommentCreated.profileId": string;
  /** Format: bigint */
  "rowFilter.CommentCreated.pubId": string;
  /** Format: text */
  "rowFilter.CommentCreated.contentURI": string;
  /** Format: bigint */
  "rowFilter.CommentCreated.profileIdPointed": string;
  /** Format: bigint */
  "rowFilter.CommentCreated.pubIdPointed": string;
  /** Format: bytea */
  "rowFilter.CommentCreated.referenceModuleData": string;
  /** Format: character varying */
  "rowFilter.CommentCreated.collectModule": string;
  /** Format: bytea */
  "rowFilter.CommentCreated.collectModuleReturnData": string;
  /** Format: character varying */
  "rowFilter.CommentCreated.referenceModule": string;
  /** Format: bytea */
  "rowFilter.CommentCreated.referenceModuleReturnData": string;
  /** Format: bigint */
  "rowFilter.CommentCreated.timestamp": string;
  /** @description ModuleGlobalsTreasuryFeeSet */
  "body.ModuleGlobalsTreasuryFeeSet": definitions["ModuleGlobalsTreasuryFeeSet"];
  /** Format: integer */
  "rowFilter.ModuleGlobalsTreasuryFeeSet.event_id": string;
  /** Format: integer */
  "rowFilter.ModuleGlobalsTreasuryFeeSet.prevTreasuryFee": string;
  /** Format: integer */
  "rowFilter.ModuleGlobalsTreasuryFeeSet.newTreasuryFee": string;
  /** Format: bigint */
  "rowFilter.ModuleGlobalsTreasuryFeeSet.timestamp": string;
  /** @description ProfileImageURISet */
  "body.ProfileImageURISet": definitions["ProfileImageURISet"];
  /** Format: integer */
  "rowFilter.ProfileImageURISet.event_id": string;
  /** Format: bigint */
  "rowFilter.ProfileImageURISet.profileId": string;
  /** Format: text */
  "rowFilter.ProfileImageURISet.imageURI": string;
  /** Format: bigint */
  "rowFilter.ProfileImageURISet.timestamp": string;
  /** @description StateSet */
  "body.StateSet": definitions["StateSet"];
  /** Format: integer */
  "rowFilter.StateSet.event_id": string;
  /** Format: character varying */
  "rowFilter.StateSet.caller": string;
  /** Format: smallint */
  "rowFilter.StateSet.prevState": string;
  /** Format: smallint */
  "rowFilter.StateSet.newState": string;
  /** Format: bigint */
  "rowFilter.StateSet.timestamp": string;
  /** @description CollectModuleWhitelisted */
  "body.CollectModuleWhitelisted": definitions["CollectModuleWhitelisted"];
  /** Format: integer */
  "rowFilter.CollectModuleWhitelisted.event_id": string;
  /** Format: character varying */
  "rowFilter.CollectModuleWhitelisted.collectModule": string;
  /** Format: boolean */
  "rowFilter.CollectModuleWhitelisted.whitelisted": string;
  /** Format: bigint */
  "rowFilter.CollectModuleWhitelisted.timestamp": string;
  /** @description FollowNFTTransferred */
  "body.FollowNFTTransferred": definitions["FollowNFTTransferred"];
  /** Format: integer */
  "rowFilter.FollowNFTTransferred.event_id": string;
  /** Format: bigint */
  "rowFilter.FollowNFTTransferred.profileId": string;
  /** Format: bigint */
  "rowFilter.FollowNFTTransferred.followNFTId": string;
  /** Format: character varying */
  "rowFilter.FollowNFTTransferred.from": string;
  /** Format: character varying */
  "rowFilter.FollowNFTTransferred.to": string;
  /** Format: bigint */
  "rowFilter.FollowNFTTransferred.timestamp": string;
  /** @description FollowNFTDelegatedPowerChanged */
  "body.FollowNFTDelegatedPowerChanged": definitions["FollowNFTDelegatedPowerChanged"];
  /** Format: integer */
  "rowFilter.FollowNFTDelegatedPowerChanged.event_id": string;
  /** Format: character varying */
  "rowFilter.FollowNFTDelegatedPowerChanged.delegate": string;
  /** Format: bigint */
  "rowFilter.FollowNFTDelegatedPowerChanged.newPower": string;
  /** Format: bigint */
  "rowFilter.FollowNFTDelegatedPowerChanged.timestamp": string;
  /** @description Transfer */
  "body.Transfer": definitions["Transfer"];
  /** Format: integer */
  "rowFilter.Transfer.event_id": string;
  /** Format: character varying */
  "rowFilter.Transfer.from": string;
  /** Format: character varying */
  "rowFilter.Transfer.to": string;
  /** Format: bigint */
  "rowFilter.Transfer.tokenId": string;
}

export interface operations {}

export interface external {}
